package com.mycompany.gymhall;

import java.util.ArrayList;

/**
 * Represents a specific hall in the gym, including its facilities, classes, trainers, and members.
 */
public class GymHall {
    private String name;
    private int capacity;
    private String location;
    private ArrayList<GymClass> classesOffered; // List to store GymClass objects
    private ArrayList<Trainer> trainers; // List to store Trainer objects
    private ArrayList<GymMembers> members;  // List to store GymMembers objects

    /**
     * Constructs a new Gym Hall with specified name, capacity, and location.
     * Initializes lists to manage classes, trainers, and members within the hall.
     *
     * @param name Name of the hall.
     * @param capacity Maximum number of people the hall can accommodate.
     * @param location Physical location of the hall.
     */
    public GymHall(String name, int capacity, String location) {
        this.name = name;
        this.capacity = capacity;
        this.location = location;
        this.classesOffered = new ArrayList<>();
        this.trainers = new ArrayList<>();
        this.members = new ArrayList<>();
    }

    /**
     * Adds a GymClass to the hall's offerings.
     *
     * @param newClass The GymClass object to be added.
     */
    public void addClass(GymClass newClass) {
        for (GymClass gymClass : classesOffered) {
            if (gymClass.getClassName().equals(newClass.getClassName())) {
                System.out.println("This class already exists in the hall.");
                return;
            }
        }
        classesOffered.add(newClass);
    }

    /**
     * Removes a GymClass from the hall's offerings.
     *
     * @param className Name of the class to be removed.
     */
    public void removeClass(String className) {
        classesOffered.removeIf(gymClass -> gymClass.getClassName().equals(className));
    }

    /**
     * Adds a Trainer to the gym hall.
     *
     * @param newTrainer The Trainer object to be added.
     */
    public void addTrainer(Trainer newTrainer) {
        for (Trainer trainer : trainers) {
            if (trainer.getName().equals(newTrainer.getName())) {
                System.out.println("This trainer is already working in the hall.");
                return;
            }
        }
        trainers.add(newTrainer);
    }

    /**
     * Removes a Trainer from the gym hall.
     *
     * @param trainerName Name of the trainer to be removed.
     */
    public void removeTrainer(String trainerName) {
        trainers.removeIf(trainer -> trainer.getName().equals(trainerName));
    }

    /**
     * Adds a member to the hall.
     *
     * @param member A GymMembers object representing the member to be added.
     */
    public void addMember(GymMembers member) {
        members.add(member);
    }

    /**
     * Removes a member from the hall.
     *
     * @param member A GymMembers object representing the member to be removed.
     */
    public void removeMember(GymMembers member) {
        members.remove(member);
    }

    // Getter and setter methods for name, capacity, and location

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getCapacity() {
        return capacity;
    }

    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    // Methods to get copies of the lists to avoid direct modification

    public ArrayList<GymClass> getClassesOffered() {
        return new ArrayList<>(classesOffered);
    }

    public ArrayList<Trainer> getTrainers() {
        return new ArrayList<>(trainers);
    }

    public ArrayList<GymMembers> getMembers() {
        return new ArrayList<>(members);
    }
}
